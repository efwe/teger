// Generated by CoffeeScript 1.10.0
this.Obelometer = (function() {
  function Obelometer() {
    var canvas, point;
    canvas = $('#obelometer');
    this.dms = 50;
    this.index = 0;
    this.colorMap = {
      10: [0x0B0B61, 0x0B0B61],
      11: [0x0B0B61, 0x0B0B61],
      12: [0x0B0B61, 0x0B0B61],
      13: [0x0B0B61, 0x0B0B61],
      14: [0x0B0B61, 0x0B0B61],
      15: [0x0B0B61, 0x0B0B61],
      16: [0x0B0B61, 0x0000FF],
      17: [0x0000FF, 0x0040FF],
      18: [0x00BFFF, 0x0080FF],
      19: [0x01DF3A, 0x01DF01],
      20: [0x01DF3A, 0x01DF01],
      21: [0x01DF3A, 0x01DF01],
      22: [0x01DF3A, 0x01DF01],
      23: [0x3ADF00, 0x74DF00],
      24: [0xA5DF00, 0xD7DF01],
      25: [0xDBA901, 0xDF7401],
      26: [0xDF3A01, 0xDF0101],
      27: [0xB43104, 0xB40404],
      28: [0xB40404, 0x8A0808],
      29: [0x61210B, 0x610B0B],
      30: [0x61210B, 0x610B0B],
      31: [0x61210B, 0x610B0B],
      32: [0x61210B, 0x610B0B],
      33: [0x61210B, 0x610B0B],
      34: [0x61210B, 0x610B0B],
      35: [0x61210B, 0x610B0B],
      36: [0x61210B, 0x610B0B]
    };
    point = new obelisk.Point(250, 450);
    this.pixelView = new obelisk.PixelView(canvas, point);
    this.renderGrid();
    console.log('obelometer started');
  }

  Obelometer.prototype.cube = function(height, color) {
    var cube, dimension;
    dimension = new obelisk.CubeDimension(this.dms, this.dms, height);
    color = new obelisk.CubeColor().getByHorizontalColor(color);
    cube = new obelisk.Cube(dimension, color, true);
    return cube;
  };

  Obelometer.prototype.renderGrid = function() {
    var brick, color, dimension, i, j, k, p3dBrick, results;
    color = new obelisk.SideColor().getByInnerColor(obelisk.ColorPattern.GRAY);
    dimension = new obelisk.BrickDimension(this.dms, this.dms);
    brick = new obelisk.Brick(dimension, color);
    results = [];
    for (i = k = 0; k <= 3; i = ++k) {
      results.push((function() {
        var l, results1;
        results1 = [];
        for (j = l = 0; l <= 4; j = ++l) {
          p3dBrick = new obelisk.Point3D(i * (this.dms - 2), j * (this.dms - 2), 0);
          results1.push(this.pixelView.renderObject(brick, p3dBrick));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  Obelometer.prototype.reset = function() {
    var canvas, context;
    canvas = $('#obelometer').get(0);
    context = canvas.getContext('2d');
    context.clearRect(0, 0, canvas.width, canvas.height);
    this.index = 0;
    return this.renderGrid();
  };

  Obelometer.prototype.color = function(temp) {
    var base, colors, fraction;
    base = Math.floor(temp);
    if (temp < 10) {
      colors = this.colorMap[10];
    } else if (temp > 36) {
      colors = this.colorMap[36];
    } else {
      colors = this.colorMap[base];
    }
    fraction = temp % 1;
    if (fraction < 0.5) {
      return colors[0];
    } else {
      return colors[1];
    }
  };

  Obelometer.prototype.coords = function() {
    var x, y;
    y = 0;
    if (this.index > 0) {
      y = Math.floor(this.index / 4);
    }
    x = this.index % 4;
    return [x, y];
  };

  Obelometer.prototype.renderCube = function(temp) {
    var color, cube, point, ref, x, y;
    if (this.index === 20) {
      this.reset();
    }
    color = this.color(temp);
    ref = this.coords(), x = ref[0], y = ref[1];
    point = new obelisk.Point3D(x * (this.dms - 2), y * (this.dms - 2), 0);
    cube = this.cube(Math.round(temp * 10), color);
    this.pixelView.renderObject(cube, point);
    return this.index++;
  };

  Obelometer.prototype.showTemperature = function(message) {
    $('#temp-display').text(message.temperature.value);
    $('#time-display').text(message.date.dayOfYear + "/" + message.date.monthValue + "/" + message.date.year + "-" + message.date.hour + ":" + message.date.minute + ":" + message.date.second);
    return this.renderCube(message.temperature.value);
  };

  return Obelometer;

})();
